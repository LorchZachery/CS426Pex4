/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using ToyLanguage.node;

namespace ToyLanguage.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProg(AProg node);
    void CaseAMultipleStmts(AMultipleStmts node);
    void CaseASingleStmts(ASingleStmts node);
    void CaseAAssignStmt(AAssignStmt node);
    void CaseADeclStmt(ADeclStmt node);
    void CaseAFcStmt(AFcStmt node);
    void CaseAAssignstmt(AAssignstmt node);
    void CaseADeclarestmt(ADeclarestmt node);
    void CaseAFunctioncall(AFunctioncall node);
    void CaseAMultipleArguments(AMultipleArguments node);
    void CaseANoneArguments(ANoneArguments node);
    void CaseAArgument(AArgument node);
    void CaseAPlusExpr(APlusExpr node);
    void CaseAPassExpr(APassExpr node);
    void CaseAMultExpr2(AMultExpr2 node);
    void CaseAPassExpr2(APassExpr2 node);
    void CaseAIntOperand(AIntOperand node);
    void CaseAVariableOperand(AVariableOperand node);
    void CaseAStringOperand(AStringOperand node);

    void CaseTAssign(TAssign node);
    void CaseTPlus(TPlus node);
    void CaseTMult(TMult node);
    void CaseTBlank(TBlank node);
    void CaseTEol(TEol node);
    void CaseTLparen(TLparen node);
    void CaseTRparen(TRparen node);
    void CaseTComma(TComma node);
    void CaseTId(TId node);
    void CaseTComment(TComment node);
    void CaseTInteger(TInteger node);
    void CaseTString(TString node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProg(AProg node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleStmts(AMultipleStmts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleStmts(ASingleStmts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignStmt(AAssignStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclStmt(ADeclStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFcStmt(AFcStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignstmt(AAssignstmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarestmt(ADeclarestmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctioncall(AFunctioncall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleArguments(AMultipleArguments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneArguments(ANoneArguments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArgument(AArgument node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPlusExpr(APlusExpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpr(APassExpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultExpr2(AMultExpr2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpr2(APassExpr2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntOperand(AIntOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableOperand(AVariableOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringOperand(AStringOperand node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTAssign(TAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMult(TMult node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEol(TEol node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLparen(TLparen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRparen(TRparen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInteger(TInteger node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProg().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProg(AProg node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProg(AProg node)
    {
        DefaultOut(node);
    }

    public override void CaseAProg(AProg node)
    {
        InAProg(node);
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        OutAProg(node);
    }
    public virtual void InAMultipleStmts(AMultipleStmts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStmts(AMultipleStmts node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStmts(AMultipleStmts node)
    {
        InAMultipleStmts(node);
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        if(node.GetStmt() != null)
        {
            node.GetStmt().Apply(this);
        }
        OutAMultipleStmts(node);
    }
    public virtual void InASingleStmts(ASingleStmts node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleStmts(ASingleStmts node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleStmts(ASingleStmts node)
    {
        InASingleStmts(node);
        if(node.GetStmt() != null)
        {
            node.GetStmt().Apply(this);
        }
        OutASingleStmts(node);
    }
    public virtual void InAAssignStmt(AAssignStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStmt(AAssignStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStmt(AAssignStmt node)
    {
        InAAssignStmt(node);
        if(node.GetAssignstmt() != null)
        {
            node.GetAssignstmt().Apply(this);
        }
        OutAAssignStmt(node);
    }
    public virtual void InADeclStmt(ADeclStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclStmt(ADeclStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclStmt(ADeclStmt node)
    {
        InADeclStmt(node);
        if(node.GetDeclarestmt() != null)
        {
            node.GetDeclarestmt().Apply(this);
        }
        OutADeclStmt(node);
    }
    public virtual void InAFcStmt(AFcStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFcStmt(AFcStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAFcStmt(AFcStmt node)
    {
        InAFcStmt(node);
        if(node.GetFunctioncall() != null)
        {
            node.GetFunctioncall().Apply(this);
        }
        OutAFcStmt(node);
    }
    public virtual void InAAssignstmt(AAssignstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignstmt(AAssignstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignstmt(AAssignstmt node)
    {
        InAAssignstmt(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAAssignstmt(node);
    }
    public virtual void InADeclarestmt(ADeclarestmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarestmt(ADeclarestmt node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarestmt(ADeclarestmt node)
    {
        InADeclarestmt(node);
        if(node.GetTypename() != null)
        {
            node.GetTypename().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutADeclarestmt(node);
    }
    public virtual void InAFunctioncall(AFunctioncall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctioncall(AFunctioncall node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctioncall(AFunctioncall node)
    {
        InAFunctioncall(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAFunctioncall(node);
    }
    public virtual void InAMultipleArguments(AMultipleArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleArguments(AMultipleArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleArguments(AMultipleArguments node)
    {
        InAMultipleArguments(node);
        if(node.GetArgument() != null)
        {
            node.GetArgument().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        OutAMultipleArguments(node);
    }
    public virtual void InANoneArguments(ANoneArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneArguments(ANoneArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneArguments(ANoneArguments node)
    {
        InANoneArguments(node);
        OutANoneArguments(node);
    }
    public virtual void InAArgument(AArgument node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArgument(AArgument node)
    {
        DefaultOut(node);
    }

    public override void CaseAArgument(AArgument node)
    {
        InAArgument(node);
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        OutAArgument(node);
    }
    public virtual void InAPlusExpr(APlusExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusExpr(APlusExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusExpr(APlusExpr node)
    {
        InAPlusExpr(node);
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        OutAPlusExpr(node);
    }
    public virtual void InAPassExpr(APassExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpr(APassExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpr(APassExpr node)
    {
        InAPassExpr(node);
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        OutAPassExpr(node);
    }
    public virtual void InAMultExpr2(AMultExpr2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultExpr2(AMultExpr2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultExpr2(AMultExpr2 node)
    {
        InAMultExpr2(node);
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAMultExpr2(node);
    }
    public virtual void InAPassExpr2(APassExpr2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpr2(APassExpr2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpr2(APassExpr2 node)
    {
        InAPassExpr2(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExpr2(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
    public virtual void InAStringOperand(AStringOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringOperand(AStringOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringOperand(AStringOperand node)
    {
        InAStringOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringOperand(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProg().Apply(this);
        OutStart(node);
    }

    public virtual void InAProg(AProg node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProg(AProg node)
    {
        DefaultOut(node);
    }

    public override void CaseAProg(AProg node)
    {
        InAProg(node);
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        OutAProg(node);
    }
    public virtual void InAMultipleStmts(AMultipleStmts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStmts(AMultipleStmts node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStmts(AMultipleStmts node)
    {
        InAMultipleStmts(node);
        if(node.GetStmt() != null)
        {
            node.GetStmt().Apply(this);
        }
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        OutAMultipleStmts(node);
    }
    public virtual void InASingleStmts(ASingleStmts node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleStmts(ASingleStmts node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleStmts(ASingleStmts node)
    {
        InASingleStmts(node);
        if(node.GetStmt() != null)
        {
            node.GetStmt().Apply(this);
        }
        OutASingleStmts(node);
    }
    public virtual void InAAssignStmt(AAssignStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStmt(AAssignStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStmt(AAssignStmt node)
    {
        InAAssignStmt(node);
        if(node.GetAssignstmt() != null)
        {
            node.GetAssignstmt().Apply(this);
        }
        OutAAssignStmt(node);
    }
    public virtual void InADeclStmt(ADeclStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclStmt(ADeclStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclStmt(ADeclStmt node)
    {
        InADeclStmt(node);
        if(node.GetDeclarestmt() != null)
        {
            node.GetDeclarestmt().Apply(this);
        }
        OutADeclStmt(node);
    }
    public virtual void InAFcStmt(AFcStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFcStmt(AFcStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAFcStmt(AFcStmt node)
    {
        InAFcStmt(node);
        if(node.GetFunctioncall() != null)
        {
            node.GetFunctioncall().Apply(this);
        }
        OutAFcStmt(node);
    }
    public virtual void InAAssignstmt(AAssignstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignstmt(AAssignstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignstmt(AAssignstmt node)
    {
        InAAssignstmt(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAssignstmt(node);
    }
    public virtual void InADeclarestmt(ADeclarestmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarestmt(ADeclarestmt node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarestmt(ADeclarestmt node)
    {
        InADeclarestmt(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetTypename() != null)
        {
            node.GetTypename().Apply(this);
        }
        OutADeclarestmt(node);
    }
    public virtual void InAFunctioncall(AFunctioncall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctioncall(AFunctioncall node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctioncall(AFunctioncall node)
    {
        InAFunctioncall(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAFunctioncall(node);
    }
    public virtual void InAMultipleArguments(AMultipleArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleArguments(AMultipleArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleArguments(AMultipleArguments node)
    {
        InAMultipleArguments(node);
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetArgument() != null)
        {
            node.GetArgument().Apply(this);
        }
        OutAMultipleArguments(node);
    }
    public virtual void InANoneArguments(ANoneArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneArguments(ANoneArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneArguments(ANoneArguments node)
    {
        InANoneArguments(node);
        OutANoneArguments(node);
    }
    public virtual void InAArgument(AArgument node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArgument(AArgument node)
    {
        DefaultOut(node);
    }

    public override void CaseAArgument(AArgument node)
    {
        InAArgument(node);
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        OutAArgument(node);
    }
    public virtual void InAPlusExpr(APlusExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusExpr(APlusExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusExpr(APlusExpr node)
    {
        InAPlusExpr(node);
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        OutAPlusExpr(node);
    }
    public virtual void InAPassExpr(APassExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpr(APassExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpr(APassExpr node)
    {
        InAPassExpr(node);
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        OutAPassExpr(node);
    }
    public virtual void InAMultExpr2(AMultExpr2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultExpr2(AMultExpr2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultExpr2(AMultExpr2 node)
    {
        InAMultExpr2(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        OutAMultExpr2(node);
    }
    public virtual void InAPassExpr2(APassExpr2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpr2(APassExpr2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpr2(APassExpr2 node)
    {
        InAPassExpr2(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExpr2(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
    public virtual void InAStringOperand(AStringOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringOperand(AStringOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringOperand(AStringOperand node)
    {
        InAStringOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringOperand(node);
    }
}
} // namespace ToyLanguage.analysis
