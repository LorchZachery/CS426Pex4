/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  ToyLanguage.analysis;

namespace ToyLanguage.node {

public abstract class PProg : Node
{
}

public abstract class PStmts : Node
{
}

public abstract class PStmt : Node
{
}

public abstract class PAssignstmt : Node
{
}

public abstract class PDeclarestmt : Node
{
}

public abstract class PFunctioncall : Node
{
}

public abstract class PArguments : Node
{
}

public abstract class PArgument : Node
{
}

public abstract class PExpr : Node
{
}

public abstract class PExpr2 : Node
{
}

public abstract class POperand : Node
{
}


public sealed class AProg : PProg
{
    private PStmts _stmts_;

    public AProg ()
    {
    }

    public AProg (
            PStmts _stmts_
    )
    {
        SetStmts (_stmts_);
    }

    public override Object Clone()
    {
        return new AProg (
            (PStmts)CloneNode (_stmts_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProg(this);
    }

    public PStmts GetStmts ()
    {
        return _stmts_;
    }

    public void SetStmts (PStmts node)
    {
        if(_stmts_ != null)
        {
            _stmts_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stmts_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_stmts_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _stmts_ == child )
        {
            _stmts_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _stmts_ == oldChild )
        {
            SetStmts ((PStmts) newChild);
            return;
        }
    }

}
public sealed class AMultipleStmts : PStmts
{
    private PStmts _stmts_;
    private PStmt _stmt_;

    public AMultipleStmts ()
    {
    }

    public AMultipleStmts (
            PStmts _stmts_,
            PStmt _stmt_
    )
    {
        SetStmts (_stmts_);
        SetStmt (_stmt_);
    }

    public override Object Clone()
    {
        return new AMultipleStmts (
            (PStmts)CloneNode (_stmts_),
            (PStmt)CloneNode (_stmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleStmts(this);
    }

    public PStmts GetStmts ()
    {
        return _stmts_;
    }

    public void SetStmts (PStmts node)
    {
        if(_stmts_ != null)
        {
            _stmts_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stmts_ = node;
    }
    public PStmt GetStmt ()
    {
        return _stmt_;
    }

    public void SetStmt (PStmt node)
    {
        if(_stmt_ != null)
        {
            _stmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_stmts_)
            + ToString (_stmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _stmts_ == child )
        {
            _stmts_ = null;
            return;
        }
        if ( _stmt_ == child )
        {
            _stmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _stmts_ == oldChild )
        {
            SetStmts ((PStmts) newChild);
            return;
        }
        if ( _stmt_ == oldChild )
        {
            SetStmt ((PStmt) newChild);
            return;
        }
    }

}
public sealed class ASingleStmts : PStmts
{
    private PStmt _stmt_;

    public ASingleStmts ()
    {
    }

    public ASingleStmts (
            PStmt _stmt_
    )
    {
        SetStmt (_stmt_);
    }

    public override Object Clone()
    {
        return new ASingleStmts (
            (PStmt)CloneNode (_stmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleStmts(this);
    }

    public PStmt GetStmt ()
    {
        return _stmt_;
    }

    public void SetStmt (PStmt node)
    {
        if(_stmt_ != null)
        {
            _stmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_stmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _stmt_ == child )
        {
            _stmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _stmt_ == oldChild )
        {
            SetStmt ((PStmt) newChild);
            return;
        }
    }

}
public sealed class AAssignStmt : PStmt
{
    private PAssignstmt _assignstmt_;

    public AAssignStmt ()
    {
    }

    public AAssignStmt (
            PAssignstmt _assignstmt_
    )
    {
        SetAssignstmt (_assignstmt_);
    }

    public override Object Clone()
    {
        return new AAssignStmt (
            (PAssignstmt)CloneNode (_assignstmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignStmt(this);
    }

    public PAssignstmt GetAssignstmt ()
    {
        return _assignstmt_;
    }

    public void SetAssignstmt (PAssignstmt node)
    {
        if(_assignstmt_ != null)
        {
            _assignstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignstmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assignstmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assignstmt_ == child )
        {
            _assignstmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assignstmt_ == oldChild )
        {
            SetAssignstmt ((PAssignstmt) newChild);
            return;
        }
    }

}
public sealed class ADeclStmt : PStmt
{
    private PDeclarestmt _declarestmt_;

    public ADeclStmt ()
    {
    }

    public ADeclStmt (
            PDeclarestmt _declarestmt_
    )
    {
        SetDeclarestmt (_declarestmt_);
    }

    public override Object Clone()
    {
        return new ADeclStmt (
            (PDeclarestmt)CloneNode (_declarestmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclStmt(this);
    }

    public PDeclarestmt GetDeclarestmt ()
    {
        return _declarestmt_;
    }

    public void SetDeclarestmt (PDeclarestmt node)
    {
        if(_declarestmt_ != null)
        {
            _declarestmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declarestmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declarestmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declarestmt_ == child )
        {
            _declarestmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declarestmt_ == oldChild )
        {
            SetDeclarestmt ((PDeclarestmt) newChild);
            return;
        }
    }

}
public sealed class AFcStmt : PStmt
{
    private PFunctioncall _functioncall_;

    public AFcStmt ()
    {
    }

    public AFcStmt (
            PFunctioncall _functioncall_
    )
    {
        SetFunctioncall (_functioncall_);
    }

    public override Object Clone()
    {
        return new AFcStmt (
            (PFunctioncall)CloneNode (_functioncall_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFcStmt(this);
    }

    public PFunctioncall GetFunctioncall ()
    {
        return _functioncall_;
    }

    public void SetFunctioncall (PFunctioncall node)
    {
        if(_functioncall_ != null)
        {
            _functioncall_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _functioncall_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_functioncall_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _functioncall_ == child )
        {
            _functioncall_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _functioncall_ == oldChild )
        {
            SetFunctioncall ((PFunctioncall) newChild);
            return;
        }
    }

}
public sealed class AAssignstmt : PAssignstmt
{
    private TId _id_;
    private TAssign _assign_;
    private PExpr _expr_;
    private TEol _eol_;

    public AAssignstmt ()
    {
    }

    public AAssignstmt (
            TId _id_,
            TAssign _assign_,
            PExpr _expr_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetAssign (_assign_);
        SetExpr (_expr_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AAssignstmt (
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PExpr)CloneNode (_expr_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignstmt(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_expr_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class ADeclarestmt : PDeclarestmt
{
    private TId _typename_;
    private TId _varname_;
    private TEol _eol_;

    public ADeclarestmt ()
    {
    }

    public ADeclarestmt (
            TId _typename_,
            TId _varname_,
            TEol _eol_
    )
    {
        SetTypename (_typename_);
        SetVarname (_varname_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new ADeclarestmt (
            (TId)CloneNode (_typename_),
            (TId)CloneNode (_varname_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclarestmt(this);
    }

    public TId GetTypename ()
    {
        return _typename_;
    }

    public void SetTypename (TId node)
    {
        if(_typename_ != null)
        {
            _typename_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _typename_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_typename_)
            + ToString (_varname_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _typename_ == child )
        {
            _typename_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _typename_ == oldChild )
        {
            SetTypename ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AFunctioncall : PFunctioncall
{
    private TId _id_;
    private TLparen _lparen_;
    private PArguments _arguments_;
    private TRparen _rparen_;
    private TEol _eol_;

    public AFunctioncall ()
    {
    }

    public AFunctioncall (
            TId _id_,
            TLparen _lparen_,
            PArguments _arguments_,
            TRparen _rparen_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetLparen (_lparen_);
        SetArguments (_arguments_);
        SetRparen (_rparen_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AFunctioncall (
            (TId)CloneNode (_id_),
            (TLparen)CloneNode (_lparen_),
            (PArguments)CloneNode (_arguments_),
            (TRparen)CloneNode (_rparen_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctioncall(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PArguments GetArguments ()
    {
        return _arguments_;
    }

    public void SetArguments (PArguments node)
    {
        if(_arguments_ != null)
        {
            _arguments_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arguments_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_lparen_)
            + ToString (_arguments_)
            + ToString (_rparen_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _arguments_ == child )
        {
            _arguments_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _arguments_ == oldChild )
        {
            SetArguments ((PArguments) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AMultipleArguments : PArguments
{
    private PArgument _argument_;
    private TComma _comma_;
    private PArguments _arguments_;

    public AMultipleArguments ()
    {
    }

    public AMultipleArguments (
            PArgument _argument_,
            TComma _comma_,
            PArguments _arguments_
    )
    {
        SetArgument (_argument_);
        SetComma (_comma_);
        SetArguments (_arguments_);
    }

    public override Object Clone()
    {
        return new AMultipleArguments (
            (PArgument)CloneNode (_argument_),
            (TComma)CloneNode (_comma_),
            (PArguments)CloneNode (_arguments_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleArguments(this);
    }

    public PArgument GetArgument ()
    {
        return _argument_;
    }

    public void SetArgument (PArgument node)
    {
        if(_argument_ != null)
        {
            _argument_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _argument_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PArguments GetArguments ()
    {
        return _arguments_;
    }

    public void SetArguments (PArguments node)
    {
        if(_arguments_ != null)
        {
            _arguments_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arguments_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_argument_)
            + ToString (_comma_)
            + ToString (_arguments_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _argument_ == child )
        {
            _argument_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _arguments_ == child )
        {
            _arguments_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _argument_ == oldChild )
        {
            SetArgument ((PArgument) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _arguments_ == oldChild )
        {
            SetArguments ((PArguments) newChild);
            return;
        }
    }

}
public sealed class ANoneArguments : PArguments
{


    public ANoneArguments (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneArguments (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneArguments(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AArgument : PArgument
{
    private PExpr _expr_;

    public AArgument ()
    {
    }

    public AArgument (
            PExpr _expr_
    )
    {
        SetExpr (_expr_);
    }

    public override Object Clone()
    {
        return new AArgument (
            (PExpr)CloneNode (_expr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArgument(this);
    }

    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
    }

}
public sealed class APlusExpr : PExpr
{
    private PExpr _expr_;
    private TPlus _plus_;
    private PExpr2 _expr2_;

    public APlusExpr ()
    {
    }

    public APlusExpr (
            PExpr _expr_,
            TPlus _plus_,
            PExpr2 _expr2_
    )
    {
        SetExpr (_expr_);
        SetPlus (_plus_);
        SetExpr2 (_expr2_);
    }

    public override Object Clone()
    {
        return new APlusExpr (
            (PExpr)CloneNode (_expr_),
            (TPlus)CloneNode (_plus_),
            (PExpr2)CloneNode (_expr2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPlusExpr(this);
    }

    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PExpr2 GetExpr2 ()
    {
        return _expr2_;
    }

    public void SetExpr2 (PExpr2 node)
    {
        if(_expr2_ != null)
        {
            _expr2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr_)
            + ToString (_plus_)
            + ToString (_expr2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _expr2_ == child )
        {
            _expr2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _expr2_ == oldChild )
        {
            SetExpr2 ((PExpr2) newChild);
            return;
        }
    }

}
public sealed class APassExpr : PExpr
{
    private PExpr2 _expr2_;

    public APassExpr ()
    {
    }

    public APassExpr (
            PExpr2 _expr2_
    )
    {
        SetExpr2 (_expr2_);
    }

    public override Object Clone()
    {
        return new APassExpr (
            (PExpr2)CloneNode (_expr2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpr(this);
    }

    public PExpr2 GetExpr2 ()
    {
        return _expr2_;
    }

    public void SetExpr2 (PExpr2 node)
    {
        if(_expr2_ != null)
        {
            _expr2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr2_ == child )
        {
            _expr2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr2_ == oldChild )
        {
            SetExpr2 ((PExpr2) newChild);
            return;
        }
    }

}
public sealed class AMultExpr2 : PExpr2
{
    private PExpr2 _expr2_;
    private TMult _mult_;
    private POperand _operand_;

    public AMultExpr2 ()
    {
    }

    public AMultExpr2 (
            PExpr2 _expr2_,
            TMult _mult_,
            POperand _operand_
    )
    {
        SetExpr2 (_expr2_);
        SetMult (_mult_);
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new AMultExpr2 (
            (PExpr2)CloneNode (_expr2_),
            (TMult)CloneNode (_mult_),
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultExpr2(this);
    }

    public PExpr2 GetExpr2 ()
    {
        return _expr2_;
    }

    public void SetExpr2 (PExpr2 node)
    {
        if(_expr2_ != null)
        {
            _expr2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr2_ = node;
    }
    public TMult GetMult ()
    {
        return _mult_;
    }

    public void SetMult (TMult node)
    {
        if(_mult_ != null)
        {
            _mult_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mult_ = node;
    }
    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr2_)
            + ToString (_mult_)
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr2_ == child )
        {
            _expr2_ = null;
            return;
        }
        if ( _mult_ == child )
        {
            _mult_ = null;
            return;
        }
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr2_ == oldChild )
        {
            SetExpr2 ((PExpr2) newChild);
            return;
        }
        if ( _mult_ == oldChild )
        {
            SetMult ((TMult) newChild);
            return;
        }
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class APassExpr2 : PExpr2
{
    private POperand _operand_;

    public APassExpr2 ()
    {
    }

    public APassExpr2 (
            POperand _operand_
    )
    {
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new APassExpr2 (
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpr2(this);
    }

    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class AIntOperand : POperand
{
    private TInteger _integer_;

    public AIntOperand ()
    {
    }

    public AIntOperand (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new AIntOperand (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntOperand(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class AVariableOperand : POperand
{
    private TId _id_;

    public AVariableOperand ()
    {
    }

    public AVariableOperand (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AVariableOperand (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableOperand(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AStringOperand : POperand
{
    private TString _string_;

    public AStringOperand ()
    {
    }

    public AStringOperand (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStringOperand (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringOperand(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProg _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProg _base_,
        EOF _eof_)
    {
        SetPProg(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProg) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProg GetPProg()
    {
        return _base_;
    }
    public void SetPProg(PProg node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProg((PProg) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
